{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","oneCharacter","image","width","height","name","origin","species","type","status","CardList","characters","map","key","id","SearchBox","placeholder","handleChange","minLength","debounceTimeout","onChange","API_URL","App","changeAPILinkNext","state","hasNextPage","changeAPILinkPrev","hasPrevPage","fetchAPIInformationNext","fetch","then","response","json","data","setState","results","info","next","prev","fetchAPIInformationPrev","searchByName","searchField","this","e","target","value","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uWAGaA,G,MAAO,SAACC,GAAD,OAChB,yBAAKC,UAAY,kBACb,yBACIA,UAAY,cACZC,IAAI,YACJC,IAAKH,EAAMI,aAAaC,MACxBC,MAAO,IACPC,OAAQ,MAEZ,4BAAMP,EAAMI,aAAaI,MACzB,sCAAaR,EAAMI,aAAaK,OAAOD,MACvC,uCAAcR,EAAMI,aAAaM,QAAQ,6BAAOV,EAAMI,aAAaO,MACnE,sCAAYX,EAAMI,aAAaQ,WCX1BC,G,MAAW,SAAAb,GAAK,OAC1B,yBAAKC,UAAY,aAChBD,EAAMc,WAAWC,KAAI,SAAAD,GAAU,OAC/B,kBAAC,EAAD,CAAME,IAAOF,EAAWG,GAAIb,aAAgBU,U,OCFnCI,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,kBAAC,gBAAD,CACInB,UAAY,SACZU,KAAK,SACLQ,YAAeA,EACfE,UAAW,EACXC,gBAAiB,IACjBC,SAAUH,MCPZI,G,MAAU,qDA6FDC,E,YA1Fb,aAAe,IAAD,8BACZ,+CAWFC,kBAAoB,WAClB,OAAO,EAAKC,MAAMC,YAAc,EAAKD,MAAMC,YAAcJ,GAb7C,EAgBdK,kBAAoB,WAClB,OAAO,EAAKF,MAAMG,YAAc,EAAKH,MAAMG,YAAcN,GAjB7C,EAoBdO,wBAA0B,WACxBC,MAAM,EAAKN,qBACRO,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CAACvB,WAAYsB,EAAKE,QAASV,YAAaQ,EAAKG,KAAKC,KAAMV,YAAYM,EAAKG,KAAKE,WAxBpF,EA4BdC,wBAA0B,WACxBV,MAAM,EAAKH,qBACRI,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CAACvB,WAAYsB,EAAKE,QAASV,YAAaQ,EAAKG,KAAKC,KAAMV,YAAYM,EAAKG,KAAKE,WAhCpF,EAyCdE,aAAe,SAACnC,GACdwB,MAAM,mDAAqDxB,GACxDyB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZO,YAAapC,EACboB,YAAaQ,EAAKG,MAAQH,EAAKG,KAAKC,KAAOJ,EAAKG,KAAKC,KAAO,KAC5D1B,WAAYsB,EAAKE,QAAUF,EAAKE,QAAU,SA7ChD,EAAKX,MAAQ,CACXb,WAAa,GACb8B,YAAa,GACbhB,YAAa,KACbE,YAAa,MAPH,E,iFAsCZe,KAAKd,4B,+BAeG,IAAD,SAC0Cc,KAAKlB,MAA9Cb,EADD,EACCA,WAAYc,EADb,EACaA,YAAaE,EAD1B,EAC0BA,YAEjC,OACE,yBAAK7B,UAAU,OACb,6CAAkB,6BAAlB,cACA,kBAAC,EAAD,CACEkB,YAAc,oBACdC,aAAc,SAAA0B,GAAC,OAAK,EAAKH,aAAaG,EAAEC,OAAOC,UAGjD,kBAAC,EAAD,CAAUlC,WAAYA,IAEpBgB,GACE,4BACAmB,QAAS,kBAAM,EAAKP,2BACpBzC,UAAY,UAFZ,YASF2B,GACE,4BACAqB,QAAS,kBAAM,EAAKlB,2BACpB9B,UAAY,UAFZ,a,GA9EMiD,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.638cae87.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => (\r\n    <div className = 'card-container'>\r\n        <img \r\n            className = 'aligncenter'\r\n            alt='character' \r\n            src={props.oneCharacter.image}\r\n            width={180}\r\n            height={180}\r\n        />\r\n        <h2>{ props.oneCharacter.name }</h2>\r\n        <p>Origin: { props.oneCharacter.origin.name }</p>\r\n        <p>Species: { props.oneCharacter.species}<br />{props.oneCharacter.type}</p>\r\n        <p>Status: {props.oneCharacter.status}</p>\r\n    </div>\r\n);","import React from 'react';\r\nimport { Card } from '../card/card.component';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props => (\r\n   <div className = 'card-list'>\r\n   {props.characters.map(characters => (\r\n    <Card key = {characters.id} oneCharacter = {characters}/>\r\n   ))}\r\n   </div>\r\n);\r\n\r\n","import React from 'react';\r\nimport { DebounceInput } from 'react-debounce-input';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({ placeholder, handleChange }) => (\r\n    <DebounceInput\r\n        className = 'search'\r\n        type='search'\r\n        placeholder = {placeholder}\r\n        minLength={2}\r\n        debounceTimeout={300}\r\n        onChange={handleChange} \r\n    />\r\n)","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nconst API_URL = 'https://rickandmortyapi.com/api/character/?page=1'\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      characters : [],\n      searchField: '',\n      hasNextPage: null,\n      hasPrevPage: null\n    };\n\n  }\n\n  changeAPILinkNext = () => {\n    return this.state.hasNextPage ? this.state.hasNextPage : API_URL \n  }\n\n  changeAPILinkPrev = () => {\n    return this.state.hasPrevPage ? this.state.hasPrevPage : API_URL \n  }\n\n  fetchAPIInformationNext = () => {\n    fetch(this.changeAPILinkNext())\n      .then(response => response.json())\n      .then(data => {\n        this.setState({characters: data.results, hasNextPage: data.info.next, hasPrevPage:data.info.prev})\n      })\n  }\n\n  fetchAPIInformationPrev = () => {\n    fetch(this.changeAPILinkPrev())\n      .then(response => response.json())\n      .then(data => {\n        this.setState({characters: data.results, hasNextPage: data.info.next, hasPrevPage:data.info.prev})\n    })\n  }\n\n\n  componentDidMount() {\n    this.fetchAPIInformationNext()\n  }\n\n  searchByName = (name) => {\n    fetch('https://rickandmortyapi.com/api/character/?name=' + name)\n      .then(response => response.json())\n      .then(data => {\n        this.setState({\n          searchField: name,\n          hasNextPage: data.info && data.info.next ? data.info.next : null,\n          characters: data.results ? data.results : []\n        })\n      })\n  }\n\n  render() {\n    const { characters, hasNextPage, hasPrevPage } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>Rick and Morty<br />Characters</h1>\n        <SearchBox\n          placeholder = 'Search characters'\n          handleChange={e =>  this.searchByName(e.target.value)}\n        />\n\n        <CardList characters={characters}/>\n        {\n          hasPrevPage && (\n            <button \n            onClick={() => this.fetchAPIInformationPrev()}\n            className = 'button'\n            >\n              Previous\n            </button>\n          )\n        }\n        {\n          hasNextPage && (\n            <button \n            onClick={() => this.fetchAPIInformationNext()}\n            className = 'button'\n            >\n              Next\n            </button>\n          )\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}